fn int_to_bin(s: u32) -> String {
    // 将 s 格式化为 8 位十六进制（不足补 0），再转换为二进制字符串（每一对 16 进制转成 8 位二进制）
    let hex = format!("{:08x}", s);
    let mut bin = String::new();
    for i in 0..4 {
        let pair = &hex[i * 2..i * 2 + 2];
        let byte = u8::from_str_radix(pair, 16).unwrap();
        bin.push_str(&format!("{:08b}", byte));
    }
    bin
}

fn product_detail(product: u32) -> (String, String, String) {
    // 将 product 转为 32 位二进制字符串
    let data = int_to_bin(product);
    // 如果 data[29..30] == "1"，则计算 int(data[0..12] + data[29..30] + data[12..20], 2)，否则计算 int(data[0..20], 2)
    if &data[29..30] == "1" {
        let combined = format!("{}{}{}", &data[0..12], &data[29..30], &data[12..20]);
        let x = u32::from_str_radix(&combined, 2).unwrap();
        print!("{}\t", x);
    } else {
        let x = u32::from_str_radix(&data[0..20], 2).unwrap();
        print!("{}\t", x);
    }

    // 根据 Python 代码的切片取值（由于 data 中均为 ASCII 数字，可以直接按字节切片）
    let a = &data[0..2];
    let b = &data[2..5];
    let c = &data[5..7];
    let d = &data[7..8];
    let e = &data[8..9];
    let f = &data[9..10];
    let g = &data[10..11];
    let h = &data[11..12];

    // i, j, k 分别为：data[29..30] + data[12..16]，data[16..19]，data[19..20]
    let i = format!("{}{}", &data[29..30], &data[12..16]);
    let j = &data[16..19];
    let k = &data[19..20];
    // l, m, n, o 分别为：data[30..31] + data[20..24]，data[24..27]，data[27..29]，data[31..32]
    let l = format!("{}{}", &data[30..31], &data[20..24]);
    let m = &data[24..27];
    let n = &data[27..29];
    let o = &data[31..32];

    // 以下各“字典”采用 match 表达式实现

    // dd: '0' -> "无flash", '1' -> "有flash"
    let dd = |s: &str| match s {
        "0" => "无flash",
        "1" => "有flash",
        _ => "",
    };

    // ff: '0' -> "小尺寸-无flash", '1' -> "大尺寸-有flash"
    let ff = |s: &str| match s {
        "0" => "小尺寸-无flash",
        "1" => "大尺寸-有flash",
        _ => "",
    };

    // ii: 映射 5 位字符串到对应描述
    let ii = |key: &str| match key {
        "00001" => "1.54-152_152",
        "00010" => "1.54-200_200",
        "00011" => "2.13-250_122",
        "00100" => "2.13-212_104",
        "00101" => "2.66-296_152",
        "00110" => "2.90-296_128",
        "00111" => "4.20-300_400",
        "01000" => "5.80-600_448",
        "01001" => "7.50-384_640",
        "01010" => "10.2-640_960",
        "01011" => "5.80-648_480",
        "01100" => "7.50-880*528",
        "01101" => "3.70-416_240",
        "01110" => "4.37-480_176",
        "01111" => "5.84-768*256",
        "10000" => "3.50-384_184",
        "10001" => "2.90-384_168",
        "10010" => "7.50-800_480",
        "10011" => "3.46-480_176",
        "10100" => "13.3-680_960",
        "10101" => "2.13-296_144",
        "10110" => "2.6-360_184",
        "10111" => "2.0-200*152",
        _ => "",
    };

    // jj: "001" -> "黑白屏幕", "010" -> "黑白红", "011" -> "黑白黄"
    let jj = |s: &str| match s {
        "001" => "黑白屏幕",
        "010" => "黑白红",
        "011" => "黑白黄",
        _ => "",
    };

    // kk: '0' -> "常温", '1' -> "冷冻"
    let kk = |s: &str| match s {
        "0" => "常温",
        "1" => "冷冻",
        _ => "",
    };

    // cc: "00" -> "stellarPro", "01" -> "TI-CC2640", "10" -> "泰凌微8258", "11" -> "nebular"
    let cc = |s: &str| match s {
        "00" => "stellarPro",
        "01" => "TI-CC2640",
        "10" => "泰凌微8258",
        "11" => "nebular",
        _ => "",
    };

    // mm: "001" -> "合力泰", "010" -> "大连科脉", "011" -> "无锡威锋", "100" -> "BOE", "101" -> "维信诺", "110" -> "元太"
    let mm = |s: &str| match s {
        "001" => "合力泰",
        "010" => "大连科脉",
        "011" => "无锡威锋",
        "100" => "BOE",
        "101" => "维信诺",
        "110" => "元太",
        _ => "",
    };

    // ll: 映射 5 位字符串到对应 IC 型号（完整字典）
    let ll = |s: &str| match s {
        "00001" => "1608",
        "00010" => "1673",
        "00011" => "1675A",
        "00100" => "8258A",
        "00101" => "8159",
        "00110" => "jd79651",
        "00111" => "ek79686",
        "01000" => "1677",
        "01001" => "ht001",
        "01010" => "1680",
        "01011" => "1681",
        "01100" => "79653",
        "01101" => "1656",
        "01110" => "8276",
        "01111" => "79656",
        "10000" => "8253",
        "10001" => "8252",
        "10010" => "1683",
        "10011" => "79657",
        "10100" => "8251D",
        "10101" => "8179",
        "10110" => "8176",
        "10111" => "1685",
        _ => "",
    };

    // ll1: 较短版字典
    let ll1 = |s: &str| match s {
        "00011" => "8151",
        "00100" => "8154",
        "00101" => "8157",
        "00110" => "8159",
        "00111" => "8176",
        _ => "",
    };

    // 输出：先打印 dd[d] 和 ff[f]
    print!("{} {} ", dd(d), ff(f));
    // 再打印 ii[i], jj[j], kk[k]
    print!("{} {} {}", ii(&i), jj(j), kk(k));

    // 根据 mm[m] 判断返回值
    if mm(m) == "无锡威锋" {
        (cc(c).to_string(), mm(m).to_string(), ll1(&l).to_string())
    } else {
        (cc(c).to_string(), mm(m).to_string(), ll(&l).to_string())
    }
}

fn main() {
    let result = product_detail(1453476672);
    println!();
    println!("Result: {:?}", result);
}
